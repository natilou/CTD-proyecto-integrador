stages:          # List of stages for jobs, and their order of execution
  - build_front
  - test_front
  - deploy_front
  - build_Back
  - test_Back
  - deploy_Back

front_build:       # This job runs in the build stage, which runs first.
  stage: build_front
  image: node:19-alpine3.15
  script:
    - cd frontend
    - ls -l
    - npm install
    - CI=false npm run build
    - echo "Compiling the code..."
  artifacts:
    paths:
      - frontend/build/
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^develop/ || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^main/
      changes:
        - frontend/**/*

front_test:   # This job runs in the test stage.
  stage: test_front    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests..."
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^develop/ || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^main/
      changes:
        - frontend/**/*

front_deploy:      # This job runs in the deploy stage.
  stage: deploy_front  # It only runs when *both* jobs in the test stage complete successfully.
  image: 
    name: amazon/aws-cli
    entrypoint: [""]
  script:
    - aws --version
    - ls frontend/build/
    - aws s3 rm s3://$S3_BUCKET --recursive
    - aws s3 cp frontend/build/ s3://$S3_BUCKET --recursive
    - echo "Deploying application..."
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^develop/ || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^main/
      changes:
        - frontend/**/*

back_build-job:       # This job runs in the build stage, which runs first.
  stage: build_Back
  image: maven:3.8.6-openjdk-18
  script:
    - echo "Compiling the code..."
    - ls -l
    - cd backend/PI_grupo_10
    - ls -l
    - mvn package
    - ls -l
    - cd  target
    - ls -l
    - echo "Compile complete."
  artifacts:
    paths:
      - backend/PI_grupo_10/target/*.jar
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^develop/ || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^main/
      changes:
        - backend/**/*
        - Dockerfile

back_image_build-job:       # This job runs in the build stage, which runs first.
  needs: ["back_build-job"]
  stage: build_Back
  image: docker
  services:
    - name: docker:dind
      entrypoint: ["env", "-u", "DOCKER_HOST"]
      command: ["dockerd-entrypoint.sh", "--insecure-registry=ec2-3-21-197-14.us-east-2.compute.amazonaws.com:5000"]
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    # See https://github.com/docker-library/docker/pull/166
    DOCKER_TLS_CERTDIR: ""
  script:
    #- docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - echo "Building image..."
    - ls -l
    - cd backend/PI_grupo_10
    - docker build -t ec2-3-21-197-14.us-east-2.compute.amazonaws.com:5000/digital-booking .
    - echo "Build complete."
    - echo "Pushing image to Container registry..."
    - docker push ec2-3-21-197-14.us-east-2.compute.amazonaws.com:5000/digital-booking
    - echo "Image pushed!"
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^develop/ || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^main/
      changes:
        - backend/**/*
        - Dockerfile

back_unit-test-job:   # This job runs in the test stage.
  stage: test_Back    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 1
    - echo "Code coverage is 90%"
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^develop/ || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^main/
      changes:
        - backend/**/*
        - Dockerfile

back_lint-test-job:   # This job also runs in the test stage.
  stage: test_Back    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 1
    - echo "No lint issues found."
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^develop/ || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^main/
      changes:
        - backend/**/*
        - Dockerfile

back_deploy-job:      # This job runs in the deploy stage.
  stage: deploy_Back  # It only runs when *both* jobs in the test stage complete successfully.
  image: ubuntu:22.04
  before_script:
    - chmod 400 $EC2_SSH_key
  script:
    - echo "Deploying application..."
    - apt-get update && apt-get install -y openssh-client
    - ls -l 
    - ssh -o StrictHostKeyChecking=no -i $EC2_SSH_key ubuntu@ec2-3-21-197-14.us-east-2.compute.amazonaws.com "sh deploy_digital_booking_container.sh"
    - echo "Application successfully deployed."
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^develop/ || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^main/
      changes:
        - backend/**/*
        - Dockerfile
